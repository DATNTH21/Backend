<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Repository Tree</title>
</head>
<body>
    <h1>Repository Tree for <%= repo %> </h1>
    <div id="tree-container"></div>
    <button id="back-button" style="display:none;">Back to Parent Folder</button>
    <div class="container">
        <pre id="file-content" class="file-content"></pre>
        <pre id="test-cases" class="test-cases"></pre>
    </div>
    <button id="generate-button" style="display:none;" href="/file/gen">Generate Test Case</button>
    <p><a href="/">Go back</a></p>
    <style>
        .folder { cursor: pointer; color: green; text-decoration: underline; }
        .file { cursor: pointer; color: blue; text-decoration: underline; }
        .folder:hover, .file:hover { color: darkblue; }
        .container {
            display: flex;
            justify-content: space-between;
            gap: 20px;
        }
        .file-content {
            width: 45%;
            padding: 10px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
        }
        .test-cases {
            width: 45%;
            padding: 10px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
        }
    </style>
    <script >
        const owner = '<%= owner %>';
        const repo = '<%= repo %>';
        const accessToken = '<%= req.user.accessToken %>';
        const tree = <%- JSON.stringify(directoryTree) %>; // Server-side tree data sent to the client
    
        const treeContainer = document.getElementById('tree-container');
        const backButton = document.getElementById('back-button');
        const genButton = document.getElementById('generate-button');
        const fileContent = document.getElementById('file-content');
        const testCaseContent = document.getElementById('test-cases');
    
        let currentPath = '';
    
        function renderTree(tree, container) {
            container.innerHTML = ''; // Clear container
            tree.forEach(item => {
                const itemElement = document.createElement('div');
                itemElement.innerText = item.path;
                itemElement.className = item.type === 'dir' ? 'folder' : 'file';
    
                if (item.type === 'dir') {
                    itemElement.onclick = async () => {
                        currentPath = item.path; // Update current path
                        const subTree = await fetchDirectoryTree(owner, repo, item.path);
                        renderTree(subTree, container); // Render sub-directory
                        backButton.style.display = 'block'; // Show back button
                        genButton.style.display = 'none'; // Hide Generate button
                        fileContent.style.display = 'none';
                        testCaseContent.style.display = 'none';
                    };
                } else {
                    itemElement.onclick = async () => {
                        fileContent.style.display = 'block';
                        testCaseContent.style.display = 'block';
                        const content = await fetchFileContent(item.path);
                        fileContent.innerText = content; // Show file content
                        backButton.style.display = 'block';
                        genButton.style.display = 'block'
                        // No redirect here; handle test case generation directly
                    };
                }
    
                container.appendChild(itemElement);
            });
        }
    
        async function fetchDirectoryTree(owner, repo, path) {
            const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/contents/${path}`, {
                headers: { 'Authorization': `token ${accessToken}` }
            });
            return await response.json();
        }
    
        async function fetchFileContent(filePath) {
            const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/contents/${filePath}`, {
                headers: { 'Authorization': `token ${accessToken}` }
            });
            const fileData = await response.json();
            if (fileData.content) {
                return atob(fileData.content); // Return decoded content
            } else {
                return 'File not found or empty.';
            }
        }
    
        backButton.onclick = async () => {
            const parentPath = currentPath.split('/').slice(0, -1).join('/');
            const parentTree = await fetchDirectoryTree(owner, repo, parentPath);
            renderTree(parentTree, treeContainer);
            currentPath = parentPath; // Update current path
            backButton.style.display = currentPath ? 'block' : 'none'; // Show/hide back button
            fileContent.style.display = 'none';
            testCaseContent.style.display = 'none';
            genButton.style.display = 'none'; // Hide Generate button
        };
        const dataToSend = { key: 'value', anotherKey: 'anotherValue' };
        localStorage.setItem('dataToSend', JSON.stringify(dataToSend));
        genButton.onclick = async () => {
            window.location.href = 'gen/file';
        };
        document.addEventListener('DOMContentLoaded', () => {
            renderTree(tree, treeContainer);
        });
    </script>
</body>
</html>
